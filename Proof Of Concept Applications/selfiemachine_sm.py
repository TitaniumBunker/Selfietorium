# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : selfiemachine.sm

import statemap


class selfitoriumState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def ErrorFixed(self, fsm):
        self.Default(fsm)

    def ErrorOccured(self, fsm):
        self.Default(fsm)

    def PhotoShoot(self, fsm):
        self.Default(fsm)

    def StartPhoto(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class MainMap_Default(selfitoriumState):
    pass

class MainMap_Attract(MainMap_Default):

    def StartPhoto(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.TakingPhotos)
        fsm.getState().Entry(fsm)

class MainMap_TakingPhotos(MainMap_Default):

    def ErrorOccured(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Error)
        fsm.getState().Entry(fsm)

    def PhotoShoot(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.TakingPhotos)
        fsm.getState().Entry(fsm)

class MainMap_Error(MainMap_Default):

    def ErrorFixed(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Attract)
        fsm.getState().Entry(fsm)

class MainMap(object):

    Attract = MainMap_Attract('MainMap.Attract', 0)
    TakingPhotos = MainMap_TakingPhotos('MainMap.TakingPhotos', 1)
    Error = MainMap_Error('MainMap.Error', 2)
    Default = MainMap_Default('MainMap.Default', -1)

class selfitorium_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Attract)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
